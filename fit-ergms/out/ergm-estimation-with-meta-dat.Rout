
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Analyze synthetic dataset with 32K nodes 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list=ls())
> 
> 
> # Libraries ----------
> 
> library(network)
network: Classes for Relational Data
Version 1.13.0.1 created on 2015-08-31.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

> library(ergm)

ergm: version 3.9.4, created on 2018-08-15
Copyright (c) 2018, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: Versions before 3.6.1 had a bug in the implementation of the bd()
constriant which distorted the sampled distribution somewhat. In
addition, Sampson's Monks datasets had mislabeled vertices. See the
NEWS and the documentation for more details.

> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: 'statnet.common'

The following objects are masked from 'package:ergm':

    colMeans.mcmc.list, sweep.mcmc.list

The following object is masked from 'package:base':

    order


ergm.userterms: version 3.1.1, created on 2013-04-26
Copyright (c) 2013, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.userterms").

NOTE: If you use custom ERGM terms based on 'ergm.userterms' version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
'ergm.userterms' 3.1 or later. See help('eut-upgrade') for
instructions.

Warning messages:
1: replacing previous import 'statnet.common::sweep.mcmc.list' by 'ergm::sweep.mcmc.list' when loading 'ergm.userterms' 
2: replacing previous import 'statnet.common::colMeans.mcmc.list' by 'ergm::colMeans.mcmc.list' when loading 'ergm.userterms' 
> 
> 
> # Data ----------
> 
> load("meta-mixing-init-net.RData")
> # refer to "population_2014-08-17--11.00.43--analysis.R" for an example
> 
> # Recode to add new variables to dataset ----------
> 
> # young (< 26, to be set = 1) vs old (>= 26, to be set = 0) 
> age.cat <- n0 %v% "age.cat"
> age.cat.df <- as.data.frame(age.cat)
> age.cat.df <-  
+   mutate(age.cat, young = ifelse(age.cat == 0, 1, 0), .data = age.cat.df)
> xtabs(~age.cat+young, data = age.cat.df)
       young
age.cat     0     1
      0     0  4971
      1 12111     0
      2  7030     0
      3  7888     0
> 
> 
> # Initialize network and add attributes ----------
> 
> n0 %v% "young" <- age.cat.df$young
> 
> 
> # Generate target statistics from meta-mixing data ----------
> 
> ## gender 
> ### mixing information from meta-analysis of sathcap AND socnet
> edges.male.end <- mean(c(0.58, 0.59))
> edges.female.end <- mean(c(0.40, 0.41))
> 
> male.pctmale <- 0.53 
> male.pctfemale <- 0.47
> female.pctmale <- 0.75
> female.pctfemale <- 0.22
> 
> ### set gender targets 
> tgt.male.pctmale <- edges_target*edges.male.end*male.pctmale
> tgt.male.pctfemale <- edges_target*edges.male.end*male.pctfemale
> tgt.female.pctmale <- edges_target*edges.female.end*female.pctmale  
> tgt.female.pctfemale <- edges_target*edges.female.end*female.pctfemale
> 
> # ## young (1=young; 0=old) 
> # ### mixing information from meta-analysis of sathcap AND socnet
> # young.pctyoung <- 0.60
> # young.pctold <- 0.40
> # old.pctyoung <- 0.14
> # old.pctold <- 0.86
> # 
> # ### mixing from simulation
> # sim %v% "young" <- n0 %v% "young" #attach "young" att for sim from n0
> # young.mm <- mixingmatrix(sim, "young")
> # from.old <- sum(young.mm$matrix[,1])
> # from.young <- sum(young.mm$matrix[,2])
> # 
> # ### set young targets from sathcap
> # tgt.young.pctyoung <- from.young*young.pctyoung
> # tgt.young.pctold <- from.young*young.pctold
> # tgt.old.pctyoung <- from.old*young.pctyoung  
> # tgt.old.pctold <- from.old*young.pctold
> # 
> # ## chicago 
> # ### mixing information from meta-analysis of sathcap AND socnet
> # chicago.pctchicago <- 0.67
> # chicago.pctnonchicago <- 0.30
> # nonchicago.pctchicago <- 0.60
> # nonchicago.pctnonchicago <- 0.40
> # 
> # ### mixing from simulation
> # chicago.mm <- mixingmatrix(sim, "chicago") #fem=1, chicago=2
> # from.nonchicago <- sum(chicago.mm$matrix[,1])
> # from.chicago <- sum(chicago.mm$matrix[,2])
> # 
> # ### set chicago targets from sathcap
> # tgt.chicago.pctchicago <- from.chicago*chicago.pctchicago
> # tgt.chicago.pctnonchicago <- from.chicago*chicago.pctnonchicago
> # tgt.nonchicago.pctchicago <- from.nonchicago*chicago.pctchicago
> # tgt.nonchicago.pctnonchicago <- from.nonchicago*chicago.pctnonchicago
> # 
> # ## race (1=Hisp, 2=NH Black,3=NHWhite, 4=O)
> # race.1.1 <- 0.58
> # race.1.2 <- 0.12
> # race.1.3 <- 0.18
> # race.1.4 <- 0.12
> # race.2.1 <- 0.06
> # race.2.2 <- 0.83
> # race.2.3 <- 0.10
> # race.2.4 <- 0.01
> # race.3.1 <- 0.12
> # race.3.2 <- 0.10
> # race.3.3 <- 0.73
> # race.3.4 <- 0.05
> # race.4.1 <- 0.22
> # race.4.2 <- 0.21
> # race.4.3 <- 0.43
> # race.4.4 <- 0.14
> 
> # Fit ERGM (with SATHCAP mixing) ----------
> 
> fit.sathcap.mixing <- 
+   ergm(
+     n0 ~ 
+       edges +
+       #odegree(c(0, 2, 3)) + idegree(c(0, 2, 3))+
+       nodemix("gender", base=1),
+       target.stats = c(edges_target,
+                      c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale)
+                      ),
+     eval.loglik = FALSE,
+     control = control.ergm(MCMLE.maxit = 500)
+   )
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Starting Monte Carlo maximum likelihood estimation (MCMLE):
Iteration 1 of at most 500:
Optimizing with step length 1.
The log-likelihood improved by 0.528.
Step length converged once. Increasing MCMC sample size.
Iteration 2 of at most 500:
Optimizing with step length 1.
The log-likelihood improved by 0.8559.
Step length converged twice. Stopping.
Finished MCMLE.
This model was fit using MCMC.  To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function.
> 
> 
> save.image("out/meta-mixing-ergm-fit.RData")
> 
> proc.time()
   user  system elapsed 
340.524   0.768 343.225 
