
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Summarize simulated statistics across multiple networks
> 
> rm(list=ls())
> 
> 
> # Initiate environment ------------------------------
> 
> setwd(".")
> 
> packrat::init()
Initializing packrat project in directory:
- "/gpfs/home/akhann16/code/hepcep_networks"
Initialization complete!
> .libPaths()
[1] "/gpfs/home/akhann16/code/hepcep_networks/packrat/lib/x86_64-pc-linux-gnu/3.6.0"    
[2] "/gpfs/home/akhann16/code/hepcep_networks/packrat/lib-ext/x86_64-pc-linux-gnu/3.6.0"
[3] "/gpfs/home/akhann16/code/hepcep_networks/packrat/lib-R/x86_64-pc-linux-gnu/3.6.0"  
> 
> 
> # Libraries ----------
> 
> library(network)
network: Classes for Relational Data
Version 1.16.0 created on 2019-11-30.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

> library(ergm)

ergm: version 3.10.4, created on 2019-06-10
Copyright (c) 2019, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
                    Chad Klumb
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: Versions before 3.6.1 had a bug in the implementation of the bd()
constriant which distorted the sampled distribution somewhat. In
addition, Sampson's Monks datasets had mislabeled vertices. See the
NEWS and the documentation for more details.

NOTE: Some common term arguments pertaining to vertex attribute and
level selection have changed in 3.10.0. See terms help for more
details. Use ‘options(ergm.term=list(version="3.9.4"))’ to use old
behavior.

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following object is masked from ‘package:base’:

    order


ergm.userterms: version 3.1.1, created on 2020-02-01
Copyright (c) 2020, Jonathan Ozik
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.userterms").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> 
> # Data ----------
> 
> 
> load("simulate-from-ergms/out/simulate-on-oscar-racemix-plus-dist-plus-negbin-odeg0-3-indeg0-1-orignialdata.RData")
> 
> # Compute summaries and IQRs ----------
> 
> edgecount.sim.data <- (unlist(lapply(sim_results, function (x) network.edgecount(x)))) #edge count summary
> mean(edgecount.sim.data)
[1] 24394.53
> quantile(edgecount.sim.data, probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
24018.80 24769.33 
> 
> summary(outdeg0); quantile(outdeg0, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  20229   20397   20475   20466   20533   20630 
    2.5%    97.5% 
20304.47 20618.15 
> summary(outdeg1); quantile(outdeg1, probs = c(2.5/100, 97.5/100)) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5219    5305    5352    5355    5405    5526 
    2.5%    97.5% 
5235.325 5464.100 
> summary(outdeg2); quantile(outdeg2, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2468    2522    2562    2560    2594    2698 
    2.5%    97.5% 
2478.900 2648.525 
> summary(outdeg3); quantile(outdeg3, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1323    1373    1396    1399    1423    1489 
    2.5%    97.5% 
1330.475 1463.525 
> summary(outdeg4); quantile(outdeg4, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1530    1593    1611    1615    1637    1736 
   2.5%   97.5% 
1551.95 1685.20 
> 
> summary(indeg0); quantile(indeg0, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  22999   23174   23218   23216   23264   23384 
    2.5%    97.5% 
23059.53 23354.25 
> summary(indeg1); quantile(indeg1, probs = c(2.5/100, 97.5/100)) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4011    4116    4149    4157    4195    4354 
    2.5%    97.5% 
4073.325 4260.575 
> summary(indeg2); quantile(indeg2, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    928     988    1004    1007    1032    1085 
    2.5%    97.5% 
 946.475 1063.050 
> summary(indeg3); quantile(indeg3, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  899.0   943.0   961.5   962.4   982.2  1049.0 
    2.5%    97.5% 
 915.000 1014.675 
> summary(indeg4); quantile(indeg4, probs = c(2.5/100, 97.5/100))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  742.0   797.0   814.0   813.4   830.0   873.0 
   2.5%   97.5% 
773.375 856.575 
> 
> indeg.gr.0.1 <- n - (indeg0 + indeg1)
> summary(indeg.gr.0.1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4510    4592    4626    4627    4656    4739 
> quantile(indeg.gr.0.1, probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
4549.325 4713.575 
> 
> outdeg.gr.0.3 <- n - (outdeg0 + outdeg1 + outdeg2 + outdeg3)
> summary(outdeg.gr.0.3)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2140    2195    2218    2221    2248    2318 
> quantile(outdeg.gr.0.3, probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
2160.475 2298.625 
> 
> sim.race.num <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ nodemix("race.num")))
Warning message:
`set_attrs()` is deprecated as of rlang 0.3.0
This warning is displayed once per session. 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5811    5966    6020    6016    6071    6263 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  681.0   724.0   740.0   740.7   756.2   800.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  841.0   890.0   906.5   906.8   923.0   968.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  239.0   285.0   293.5   294.6   303.0   330.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  905.0   955.5   976.5   974.7   995.2  1055.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8133    8311    8373    8378    8460    8671 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  574.0   607.5   623.0   622.8   637.8   669.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   84.0    97.0   106.0   105.5   113.0   129.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    973    1042    1059    1062    1082    1133 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  722.0   766.0   782.5   781.1   795.5   840.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3157    3242    3277    3275    3314    3391 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     78      96     100     101     106     125 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  436.0   477.8   494.5   492.8   504.0   577.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  202.0   237.0   247.5   246.4   254.0   275.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  228.0   243.0   250.0   251.3   257.5   281.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  122.0   137.0   145.0   144.6   151.0   175.0 
> 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.1"])), probs = c(2.5/100, 97.5/100))
  2.5%  97.5% 
5882.9 6209.9 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.1"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
699.950 788.625 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.1"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
858.475 954.150 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.1"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
264.900 323.525 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.2"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
 923.225 1030.775 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.2"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
8151.375 8604.350 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.2"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
581.475 661.050 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.2"])), probs = c(2.5/100, 97.5/100))
 2.5% 97.5% 
   91   123 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.3"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
1013.85 1124.10 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.3"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
735.325 820.525 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.3"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
3177.650 3378.525 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.3"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
 88.475 117.525 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.4"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
451.175 529.000 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.4"])), probs = c(2.5/100, 97.5/100))
  2.5%  97.5% 
221.90 270.05 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.4"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
230.475 276.525 
> quantile(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.4"])), probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
128.000 165.525 
> 
> 
> 
> sim.gender <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ nodemix("gender")))
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.female.female"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2582    2659    2698    2695    2725    2804 
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.male.female"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   7108    7248    7342    7325    7377    7530 
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.female.male"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6585    6737    6792    6790    6845    7022 
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.male.male"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   7366    7525    7583    7585    7633    7820 
> 
> quantile(unlist(lapply(sim.gender, function (x) x["mix.gender.female.female"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
2598.425 2781.575 
> quantile(unlist(lapply(sim.gender, function (x) x["mix.gender.male.female"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
7149.475 7502.050 
> quantile(unlist(lapply(sim.gender, function (x) x["mix.gender.female.male"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
6609.375 6945.050 
> quantile(unlist(lapply(sim.gender, function (x) x["mix.gender.male.male"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
7443.275 7765.775 
> 
> 
> sim.young <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ nodemix("young")))
> summary(unlist(lapply(sim.young, function (x) x["mix.young.0.0"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  18444   18733   18836   18859   19000   19266 
> summary(unlist(lapply(sim.young, function (x) x["mix.young.1.0"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2933    3054    3084    3084    3118    3221 
> summary(unlist(lapply(sim.young, function (x) x["mix.young.0.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  904.0   964.8   985.5   985.3  1003.0  1051.0 
> summary(unlist(lapply(sim.young, function (x) x["mix.young.1.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1363    1443    1466    1466    1490    1556 
> 
> quantile(unlist(lapply(sim.young, function (x) x["mix.young.0.0"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
18532.42 19219.83 
> quantile(unlist(lapply(sim.young, function (x) x["mix.young.1.0"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
2995.175 3187.350 
> quantile(unlist(lapply(sim.young, function (x) x["mix.young.0.1"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
 942.475 1029.625 
> quantile(unlist(lapply(sim.young, function (x) x["mix.young.1.1"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
1391.850 1525.525 
> 
> 
> sim.dist <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ dist(1:4)))
> summary(unlist(lapply(sim.dist, function (x) x["dist1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3863    3882    3890    3891    3899    3926 
> summary(unlist(lapply(sim.dist, function (x) x["dist2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8424    8502    8547    8548    8598    8669 
> summary(unlist(lapply(sim.dist, function (x) x["dist3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5603    5808    5872    5872    5952    6067 
> summary(unlist(lapply(sim.dist, function (x) x["dist4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5745    5997    6078    6083    6157    6483 
> 
> quantile(unlist(lapply(sim.dist, function (x) x["dist1"])), probs = c(2.5/100, 97.5/100))
 2.5% 97.5% 
 3870  3912 
> quantile(unlist(lapply(sim.dist, function (x) x["dist2"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
8456.950 8650.625 
> quantile(unlist(lapply(sim.dist, function (x) x["dist3"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
5704.900 6059.575 
> quantile(unlist(lapply(sim.dist, function (x) x["dist4"])), probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
5852.900 6370.625 
> 
> 
> proc.time()
   user  system elapsed 
177.037   6.538 184.056 
