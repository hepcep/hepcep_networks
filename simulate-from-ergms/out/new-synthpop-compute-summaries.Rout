
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Summarize simulated statistics across multiple networks
> 
> 
> rm(list=ls())
> 
> 
> # Libraries ----------
> 
> library(network)
network: Classes for Relational Data
Version 1.16.0 created on 2019-11-30.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

> library(ergm)

ergm: version 3.10.4, created on 2019-06-10
Copyright (c) 2019, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
                    Chad Klumb
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: Versions before 3.6.1 had a bug in the implementation of the bd()
constriant which distorted the sampled distribution somewhat. In
addition, Sampson's Monks datasets had mislabeled vertices. See the
NEWS and the documentation for more details.

NOTE: Some common term arguments pertaining to vertex attribute and
level selection have changed in 3.10.0. See terms help for more
details. Use ‘options(ergm.term=list(version="3.9.4"))’ to use old
behavior.

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following object is masked from ‘package:base’:

    order


ergm.userterms: version 3.1.1, created on 2020-02-01
Copyright (c) 2020, Jonathan Ozik
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.userterms").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> 
> # Data ----------
> 
> 
> load("out/simulate-racemix-plus-dist-plus-negbin-odeg0-3-indeg0-1-orignialdata.RData")
> 
> # Compute summaries and IQRs ----------
> 
> edgecount.sim.data <- (unlist(lapply(sim_results, function (x) network.edgecount(x)))) #edge count summary
> mean(edgecount.sim.data)
[1] 24922.91
> quantile(edgecount.sim.data, probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
24606.70 25236.72 
> 
> summary(outdeg0)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  20098   20273   20314   20317   20355   20501 
> summary(outdeg1) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5224    5328    5362    5366    5406    5536 
> summary(outdeg2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2434    2543    2575    2579    2614    2699 
> summary(outdeg3)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1353    1410    1430    1433    1452    1528 
> summary(outdeg4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1586    1653    1678    1675    1698    1779 
> 
> summary(indeg0)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  23043   23110   23144   23155   23198   23336 
> summary(indeg1) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3958    4098    4132    4134    4170    4258 
> summary(indeg2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  956.0   993.8  1014.0  1014.4  1030.5  1103.0 
> summary(indeg3)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  906.0   959.8   976.0   976.1   995.0  1039.0 
> summary(indeg4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  736.0   813.5   830.0   828.5   841.2   893.0 
> 
> indeg.gr.0.1 <- n - (indeg0 + indeg1)
> summary(indeg.gr.0.1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4613    4680    4710    4711    4742    4829 
> quantile(indeg.gr.0.1, probs = c(2.5/100, 97.5/100))
   2.5%   97.5% 
4625.95 4788.40 
> 
> outdeg.gr.0.3 <- n - (outdeg0 + outdeg1 + outdeg2 + outdeg3)
> summary(outdeg.gr.0.3)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2216    2283    2305    2305    2329    2416 
> quantile(outdeg.gr.0.3, probs = c(2.5/100, 97.5/100))
    2.5%    97.5% 
2239.325 2370.625 
> 
> sim.race.num <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ nodemix("race.num")))
Warning message:
`set_attrs()` is deprecated as of rlang 0.3.0
This warning is displayed once per session. 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5765    5916    5966    5960    6006    6113 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  684.0   730.0   743.5   744.2   756.5   798.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  798.0   851.0   868.0   866.9   882.0   925.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  258.0   277.8   286.5   287.6   297.2   322.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1006    1056    1076    1073    1088    1146 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8300    8628    8679    8676    8726    8950 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  581.0   621.0   633.0   633.1   644.0   681.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  88.00   99.75  105.00  105.39  112.00  126.00 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1054    1104    1124    1128    1154    1198 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  747.0   782.0   800.5   799.8   812.2   855.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3333    3396    3431    3432    3467    3564 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   88.0   105.0   110.0   110.9   117.0   135.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.1.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  408.0   452.5   469.0   467.4   483.5   536.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.2.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  212.0   227.0   236.0   236.7   246.0   268.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.3.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  221.0   253.0   261.0   260.1   268.0   292.0 
> summary(unlist(lapply(sim.race.num, function (x) x["mix.race.num.4.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  117.0   135.0   141.0   141.2   148.0   162.0 
> 
> sim.gender <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ nodemix("gender")))
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.female.female"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2635    2739    2774    2770    2796    2883 
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.male.female"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   7454    7584    7644    7646    7701    7878 
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.female.male"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6585    6730    6777    6784    6853    6974 
> summary(unlist(lapply(sim.gender, function (x) x["mix.gender.male.male"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   7566    7663    7726    7723    7778    7904 
> 
> sim.young <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ nodemix("young")))
> summary(unlist(lapply(sim.young, function (x) x["mix.young.0.0"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  18904   19261   19353   19341   19415   19715 
> summary(unlist(lapply(sim.young, function (x) x["mix.young.1.0"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3008    3108    3128    3135    3168    3325 
> summary(unlist(lapply(sim.young, function (x) x["mix.young.0.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  891.0   957.0   972.5   975.5   996.5  1074.0 
> summary(unlist(lapply(sim.young, function (x) x["mix.young.1.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1406    1447    1470    1472    1497    1553 
> 
> sim.dist <- lapply(nsim.vec, function (x) summary(sim_results[[x]] ~ dist(1:4)))
> summary(unlist(lapply(sim.dist, function (x) x["dist1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3911    3934    3939    3939    3944    3962 
> summary(unlist(lapply(sim.dist, function (x) x["dist2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   8648    8732    8773    8772    8805    8894 
> summary(unlist(lapply(sim.dist, function (x) x["dist3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5744    5938    5998    5988    6045    6194 
> summary(unlist(lapply(sim.dist, function (x) x["dist4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5906    6148    6219    6224    6297    6490 
> 
> 
> 
> proc.time()
   user  system elapsed 
220.674   8.106 231.393 
